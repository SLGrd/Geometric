@page "/Clock"

@using System.Timers

<div class="container-fluid m-0 p-0 d-flex flex-row align-content-center justify-content-center" style="height:100%">  
    @*"Create a pure CSS clock witih SVG" by John O. Paul (2018)*@

    <svg style="height:100%;width:100%" viewBox="0 0 40 40">     
        <circle cx="20" cy="20" r="19" />
        <g class="marks">
            <line x1="15" y1="0" x2="16" y2="0" />
            <line x1="15" y1="0" x2="16" y2="0" />
            <line x1="14" y1="0" x2="16" y2="0" />
            <line x1="15" y1="0" x2="16" y2="0" />
            <line x1="15" y1="0" x2="16" y2="0" />
            <line x1="14" y1="0" x2="16" y2="0" />
            <line x1="15" y1="0" x2="16" y2="0" />
            <line x1="15" y1="0" x2="16" y2="0" />
            <line x1="14" y1="0" x2="16" y2="0" />
            <line x1="15" y1="0" x2="16" y2="0" />
            <line x1="15" y1="0" x2="16" y2="0" />
            <line x1="14" y1="0" x2="16" y2="0" />
        </g>
        <line x1="0" y1="0" x2="8"  y2="0" class="hour"    style="transform: translate(20px, 20px) rotate( @hoursAngle  )"   />
        <line x1="0" y1="0" x2="12" y2="0" class="minute"  style="transform: translate(20px, 20px) rotate( @minutesAngle)" />
        <line x1="0" y1="0" x2="16" y2="0" class="seconds" style="transform: translate(20px, 20px) rotate( @secondsAngle)" />
        <circle cx="20" cy="20" r="0.7"    class="pin" />
    </svg>

</div>

<style>
    html {
      background: #dedede;
    }
    svg {
      width: 600px;
      fill: white;
      stroke: black;
      stroke-width: 0.2px;
      stroke-linecap: round;
    }
    
    .marks {
      transform: translate( 20px, 20px);
      stroke-width: 0.3px;
    }
    .marks > line:nth-child(1) {     
      transform: rotate( 30deg); 
    }
    .marks > line:nth-child(2) {
      transform: rotate( calc(2 * 30deg));
    }
    .marks > line:nth-child(3) {
      transform: rotate( calc(3 * 30deg));
      stroke-width: 1px;
    }
    .marks > line:nth-child(4) {
      transform: rotate( calc(4 * 30deg));
    }
    .marks > line:nth-child(5) {
      transform: rotate( calc(5 * 30deg));
    }
    .marks > line:nth-child(6) {
      transform: rotate( calc(6 * 30deg));
      stroke-width: 1px;
    }
    .marks > line:nth-child(7) {
      transform: rotate( calc(7 * 30deg));
    }
    .marks > line:nth-child(8) {
      transform: rotate( calc(8 * 30deg));
    }
    .marks > line:nth-child(9) {
      transform: rotate( calc(9 * 30deg));
      stroke-width: 2px;
    }
    .marks > line:nth-child(10) {
      transform: rotate( calc(10 * 30deg));
    }
    .marks > line:nth-child(11) {
      transform: rotate( calc(11 * 30deg));
    }
    .marks > line:nth-child(12) {
      transform: rotate( calc(12 * 30deg));
      stroke-width: 1px;
    }
    .seconds,
    .minute,
    .hour
    {
      transform: translate(20px, 20px);  
    }
    .seconds {
      stroke-width: .2px;
      stroke: #d00505;
    }
    .minute {
      stroke-width: .6px;
    }
    .hour {
      stroke-width: .8px;
    }
    .pin {
      stroke: #d00505;
      stroke-width: .1px;
    }
</style>

@code{
    string? secondsAngle, minutesAngle, hoursAngle;   
    Timer aTimer = new();

    protected override void OnInitialized()
    {
        //  First, incondicional call
        OnTimedEvent( null, null);

        //  Set timer for updating after every second
        aTimer.Elapsed += new ElapsedEventHandler( OnTimedEvent );
        aTimer.Interval = 1000;
        aTimer.Enabled  = true;
    }

    private void OnTimedEvent(object? sender, EventArgs? e)
    {
        secondsAngle = $"{-90 + DateTime.Now.Second * 6 }deg";
        minutesAngle = $"{-90 + DateTime.Now.Minute * 6 + (DateTime.Now.Second * 6.0) / 60 }deg";   // 6.0 pra nao andar continuo.
        hoursAngle   = $"{-90 + DateTime.Now.Hour * 30  + (DateTime.Now.Minute * 6)   / 12 }deg";
        StateHasChanged();
    }
}